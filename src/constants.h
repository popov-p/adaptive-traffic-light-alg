#ifndef CONSTANTS_H
#define CONSTANTS_H


#include <chrono>
#include <map>
#include <string>

/**
 * \brief Перечисление типов стадий.
 *
 * Представляет собой типы стадий, используемые в работе алгоритма.
 */
enum class StageType {
  PEDESTRIAN,
  VEHICLE,
  NONE
};

/**
 * \brief Перечисление цветов сигналов светфоров.
 *
 * Представляет собой возможные цвета сигналов светофоров.
 */
enum class Color {
  RED,
  YELLOW,
  GREEN,
  NONE
};

/**
 * \brief Преобразует значение цвета Color в строковое представление.
 *
 * Эта функция принимает значение перечисления \ref Color и возвращает строковое
 * представление соответствующего цвета.
 *
 * \param color Значение перечисления \ref Color, которое нужно преобразовать в строку.
 * \return Строка, представляющая цвет.
 */
std::string color_to_string(Color color);

using Duration = std::chrono::seconds;

/**
 * \brief Переводной коэффициент из кол-ва автомобилей в суммарное время их движения.
 *
 * Алгоритм строится на предположении, что известно, сколько, в среднем, машин
 * проезжает за 1 секунду через светофор в разные моменты времени.
 * На основании этого предположения предлагается адаптировать время действия сигналов.
 *
 */
extern const unsigned short conversion_factor;

/**
 * \brief Границы продолжительности для различных типов стадий.
 *
 * Эта глобальная переменная содержит отображение типов стадий на пару значений продолжительности
 * (минимальная и максимальная). Используется для определения допустимых границ времени для
 * каждой стадии.
 */
extern std::map<StageType, std::pair<Duration, Duration>> duration_bounds;

/**
 * \brief Пороговые значения для различных типов стадий.
 *
 * Эта глобальная переменная содержит отображение типов стадий на пару пороговых значений
 * (минимальное и максимальное). Используется для генерации рандомных данных с видеокамер, а также для установки \ref duration_bounds.
 */
extern std::map<StageType, std::pair<unsigned short, unsigned short>> amount_thresholds;
extern const Duration YELLOW_LIGHT_DURATION;


#endif // CONSTANTS_H
